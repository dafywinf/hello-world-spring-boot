name: Build and Test Hello World Application

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the main branch
    paths:
      - 'src/**'  # Trigger the workflow when changes are made to the src directory
      - 'pom.xml'  # Trigger the workflow when changes are made to the pom.xml file
      - '.github/workflows/ci.yml'  # Trigger the workflow when changes are made to the ci.yml file
  pull_request:
    branches:
      - main  # Trigger the workflow on pull requests to the main branch
    paths:
      - 'src/**'  # Trigger the workflow when changes are made to the src directory
      - 'pom.xml'  # Trigger the workflow when changes are made to the pom.xml file
      - '.github/workflows/ci.yml'  # Trigger the workflow when changes are made to the ci.yml file

jobs:

  run-commitlint-on-pr:
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install --save-dev @commitlint/config-conventional @commitlint/cli

      - name: Validate all commits from PR
        run: npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

  build-spring-boot:
    runs-on: ubuntu-latest  # The runner environment
    steps:
      - name: Print GitHub Environment Variables
        run: |
          echo "Workflow: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Repository: ${{ github.repository }}"
          echo "Event Name: ${{ github.event_name }}"
          echo "SHA: ${{ github.sha }}"
          echo "Branch: ${{ github.ref }}"
          echo "Actor: ${{ github.actor }}"
          echo "Job Status: ${{ job.status }}"
          echo "Job ID: ${{ job.id }}"
          echo "Job Run ID: ${{ job.run_id }}"
          echo "Job Attempt: ${{ job.attempt }}"

      - name: Checkout code
        uses: actions/checkout@v4  # Checkout the code from the repository

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'  # Set the JDK version required for your JHipster application
          distribution: 'temurin'  # Use the Temurin JDK distribution
          cache: maven  # Cache the JDK for future builds

      #      # Step to install the Snyk CLI tool
      #      - name: Install Snyk CLI
      #        run: |
      #          # Download the Snyk CLI binary for Linux and save it as 'snyk'
      #          curl --compressed https://static.snyk.io/cli/latest/snyk-linux -o snyk
      #          # Make the downloaded binary executable
      #          chmod +x snyk
      #
      #      # Step to run Snyk's vulnerability test on all projects
      #      - name: Snyk test
      #        continue-on-error: true  # Allows the workflow to continue even if this step fails
      #        run: ./snyk test --all-projects  # Run Snyk to test all projects for vulnerabilities
      #        env:
      #          # Passes the Snyk authentication token as an environment variable
      #          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #
      #      # Step to monitor projects with Snyk, which will track vulnerabilities over time
      #      - name: Snyk monitor
      #        continue-on-error: true  # Allows the workflow to continue even if this step fails
      #        run: ./snyk monitor --all-projects  # Run Snyk to monitor all projects for vulnerabilities
      #        env:
      #          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }} # Passes the Snyk authentication token as an environment variable

      - name: Set up the Maven dependencies caching
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      #      - name: Install Maven dependencies
      #        run: mvn install

      #      - name: Run tests
      #        run: mvn --batch-mode --update-snapshots verify

      - name: Run backend tests
        run: |
          ls -al
          echo "chmod +x mvnw"
          ./mvnw --version
          ./mvnw --batch-mode --update-snapshots install
      #          ./mvnw -ntp javadoc:javadoc --batch-mode
      #          ./mvnw -ntp checkstyle:check --batch-mode
      #          ./mvnw -ntp -Dskip.installnodenpm -Dskip.npm verify --batch-mode -Dlogging.level.ROOT=OFF -Dlogging.level.tech.jhipster=OFF -Dlogging.level.com.mycompany.myapp=OFF -Dlogging.level.org.springframework=OFF -Dlogging.level.org.springframework.web=OFF -Dlogging.level.org.springframework.security=OFF


      - name: Package the application
        run: ./mvnw -ntp verify -DskipTests --batch-mode -Pprod

      # Step 4: Log in to Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Step 5: Build the Docker image
      - name: Build Docker image
        run: |
          IMAGE_NAME="dafywinf/hello-world"
          DOCKER_IMAGE_TAG="${IMAGE_NAME}:${SHORT_SHA}"
          DOCKER_IMAGE_LATEST="${IMAGE_NAME}:latest"

          docker build -f src/main/docker/Dockerfile -t dafywinf/hello-world:${{ github.sha }} -t $DOCKER_IMAGE_LATEST .

      # Step 6: Push Docker image to Docker Hub
      - name: Push Docker image
        run: |
          docker push --all-tags dafywinf/hello-world
